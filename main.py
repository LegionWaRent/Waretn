import random
import string
import logging
import re
from database import get_all_users  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.utils import executor
import time 
from aiogram.dispatcher.filters import Text
import sqlite3
from datetime import datetime
from database import get_user_numbers
logging.basicConfig(level=logging.INFO)
confirmed_numbers = []
rejected_numbers = []
# === üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7839128982:AAExgg9qvwNrIO67c2h6An9nwqQnFDYgiGs"  # –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_GROUP_ID = -1002329021975  # ID –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–æ–≤
ADMIN_USER_IDS = {8101813488, 987654321}  # –í—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
WITHDRAW_GROUP_ID = -1002290860098  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
CHANNEL_USERNAME = "@legionWA_Rent"  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "@your_channel")

def update_statistics():
    current_time = datetime.now()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–π 24 —á–∞—Å–∞
    last_update_time = get_last_update_time()

    if last_update_time and current_time - last_update_time < timedelta(days=1):
        return  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    execute_query("UPDATE statistics SET last_update_time = ?", (current_time,))
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–æ–º–µ—Ä–∞–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
def get_user_numbers(user_id, status=None):
    query = "SELECT number, time FROM user_numbers WHERE user_id = ?"
    params = [user_id]

    if status:
        query += " AND status = ?"
        params.append(status)

    return execute_query(query, tuple(params)) or []

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤
user_balances = {}  # {user_id: balance}
user_numbers = {}   # {–Ω–æ–º–µ—Ä: {"user_id": id, "msg_id": msg_id, "photo_sent": False, "confirmed": False}}

# –ë–∞–∑–∞ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_numbers = {}  # {user_id: [{"number": "79123456789", "time": "12:30:45"}]}

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
def is_admin(user_id):
    return user_id in ADMIN_IDS

#–°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
subscribed_users = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def is_subscribed(user_id: int) -> bool:
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "member" –∏–ª–∏ –≤—ã—à–µ, —Ç–æ –æ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False
        
#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        referral_code TEXT,
        referred_by INTEGER,
        balance REAL DEFAULT 0.0
    )''')
    conn.commit()
    conn.close()
    
#–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id, username, referral_code, referred_by=None):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        referral_code TEXT,
        referred_by INTEGER,
        balance REAL DEFAULT 0
    )
    """)
    cursor.execute("INSERT INTO users (user_id, username, referral_code, referred_by) VALUES (?, ?, ?, ?)", 
                   (user_id, username, referral_code, referred_by))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID
def get_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
def get_user_by_referral_code(referral_code):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE referral_code=?", (referral_code,))
    user = cursor.fetchone()
    conn.close()
    return user

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_balance(user_id, amount):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (amount, user_id))
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_referral_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    
def get_all_users():
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = [row[0] for row in cursor.fetchall()]
    conn.close()
    return users

# === üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    menu = InlineKeyboardMarkup(row_width=2)
    menu.add(
        InlineKeyboardButton("üì§ –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"),
        InlineKeyboardButton("üìÇ –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="my_numbers")
    )
    menu.add(
        InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
        InlineKeyboardButton("üìà –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="referral_system")  # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞
    )
    menu.add(
        InlineKeyboardButton("‚ùì FAQ", callback_data="faq")  # –ö–Ω–æ–ø–∫–∞ FAQ
    )
    return menu  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π return –¥–ª—è –º–µ–Ω—é

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id

    if user_id not in subscribed_users or not subscribed_users[user_id]:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/legionWA_Rent"))
        keyboard.add(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
        await message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:", reply_markup=keyboard)
        subscribed_users[user_id] = False
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await message.answer("üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    referral_code = message.text.split()[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
    if referral_code:
        referred_by_user = get_user_by_referral_code(referral_code)
        if referred_by_user:
            add_user(user_id, message.from_user.username, generate_referral_code(), referred_by=referred_by_user[0])
            await message.answer(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É @{referred_by_user[1]}.")
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!")

            # –û—Ç—á–∏—Å–ª—è–µ–º 10% –≤–ª–∞–¥–µ–ª—å—Ü—É —Å—Å—ã–ª–∫–∏
            referral_bonus = 10  # 10% –æ—Ç —Å—É–º–º—ã, –∫–æ—Ç–æ—Ä—É—é –º—ã —Ö–æ—Ç–∏–º –Ω–∞—á–∏—Å–ª–∏—Ç—å
            update_balance(referred_by_user[0], referral_bonus)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü—É —Å—Å—ã–ª–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await bot.send_message(referred_by_user[0], f"–ü–æ–ª—É—á–µ–Ω–æ {referral_bonus} –¥–æ–ª–ª–∞—Ä–æ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ @{message.from_user.username}!")

        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
    else:
        # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        referral_code = generate_referral_code()
        add_user(user_id, message.from_user.username, referral_code)
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /referral –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")

@dp.callback_query_handler(lambda c: c.data == "referral_system")
async def referral_system(call: types.CallbackQuery):
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_username = (await bot.get_me()).username

    if bot_username:
        referral_link = f"https://t.me/{bot_username}?start={user_id}"  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        referral_link = "–û—à–∏–±–∫–∞: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    await call.message.answer(f"–ï—Å–ª–∏ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞, —Ç–æ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å –∫–∞–∂–¥–æ–≥–æ –µ–≥–æ –æ—Ç—Å—Ç–æ—è–≤—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–æ 10%. –í–æ—Ç –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")
    await call.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ===
@dp.callback_query_handler(lambda c: c.data == "check_subscription")
async def check_subscription(call: types.CallbackQuery):
    user_id = call.from_user.id

    try:
        chat_member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if chat_member.status in ['member', 'administrator', 'creator']:
            subscribed_users[user_id] = True
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            start_keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data="start_work")
            )
            await call.message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.", reply_markup=start_keyboard)
        else:
            await call.message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    except Exception as e:
        await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

    await call.answer()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" ===
@dp.callback_query_handler(lambda c: c.data == "start_work")
async def open_main_menu(call: types.CallbackQuery):
    await call.message.edit_text("üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        
#=== üì§ –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä ===
@dp.callback_query_handler(lambda c: c.data == "submit_number")
async def submit_number(call: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await call.message.answer("üì≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `+7XXXXXXXXXX`", parse_mode="Markdown", reply_markup=keyboard)
    await call.answer()

@dp.message_handler(lambda message: message.text.startswith("+7"))
async def receive_number(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    number = message.text.strip()

    if number in user_numbers and user_numbers[number].get("confirmed"):
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ user_numbers —Å —Ñ–ª–∞–≥–æ–º, —á—Ç–æ –æ–Ω –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
    user_numbers[number] = {"user_id": user_id, "confirmed": False}

    admin_message = f"üìû *–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä –æ—Ç @{username} (ID: `{user_id}`):*\nüì≤ `{number}`"

    try:
        msg = await bot.send_message(ADMIN_GROUP_ID, admin_message, parse_mode="Markdown")
        user_numbers[number]["msg_id"] = msg.message_id
        await message.answer("‚úÖ –ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã.")
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
@dp.callback_query_handler(lambda c: c.data == "back_to_main_menu")
async def back_to_main_menu(call: types.CallbackQuery):
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu = InlineKeyboardMarkup(row_width=2)
    main_menu.add(
        InlineKeyboardButton("üì§ –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"),
        InlineKeyboardButton("üìÇ –ú–æ–∏ –Ω–æ–º–µ—Ä–∞", callback_data="my_numbers")
    )
    main_menu.add(
        InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
        InlineKeyboardButton("‚ùì FAQ", callback_data="faq")
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await call.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
    await call.answer()

# –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã user_numbers
user_numbers = {}

@dp.callback_query_handler(lambda c: c.data.startswith("code_"))
async def handle_code_confirmation(callback_query: types.CallbackQuery):
    action, number = callback_query.data.split("_")[-2], callback_query.data.split("_")[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –Ω–æ–º–µ—Ä

    logging.info(f"–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {callback_query.data}")
    
    if number not in user_numbers:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return await callback_query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")

    user_info = user_numbers[number]
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    if action == "entered":
        user_info["status"] = "confirmed"
        await callback_query.answer("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        await bot.send_message(user_info["user_id"], "‚úÖ –í–∞—à –∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        text = f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\nüì≤ –ù–æ–º–µ—Ä: {number}\n‚è∞ –í—Ä–µ–º—è: {timestamp}"
    elif action == "not_entered":
        user_info["status"] = "rejected"
        await callback_query.answer("‚ùå –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω.")
        await bot.send_message(user_info["user_id"], "‚ùå –í–∞—à –∫–æ–¥ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
        text = f"‚ùå –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω!\nüì≤ –ù–æ–º–µ—Ä: {number}\n‚è∞ –í—Ä–µ–º—è: {timestamp}"

    user_numbers[number] = user_info

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä"
    skip_button = InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data=f"skip_{number}")
    skip_keyboard = InlineKeyboardMarkup().add(skip_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π
    await bot.send_message(ADMIN_GROUP_ID, text, reply_markup=skip_keyboard)

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    await callback_query.message.edit_reply_markup()

@dp.callback_query_handler(lambda c: c.data.startswith("skip_"))
async def handle_skip(callback_query: types.CallbackQuery):
    number = callback_query.data.split("_")[-1]

    if number not in user_numbers:
        return await callback_query.answer("‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")

    user_info = user_numbers[number]
    user_info["status"] = "skipped"
    
    await bot.send_message(user_info["user_id"], "‚ö†Ô∏è –í–∞—à –∫–æ–¥ –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω.")
    await bot.send_message(ADMIN_GROUP_ID, f"üì≤ –ù–æ–º–µ—Ä {number} –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω.")

    user_numbers[number] = user_info
    await callback_query.answer("‚úÖ –ù–æ–º–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω.")
    await callback_query.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É

@dp.message_handler(content_types=["photo"])
async def admin_reply_photo(message: types.Message):
    if not message.reply_to_message or message.chat.id != ADMIN_GROUP_ID:
        return

    text = message.reply_to_message.text or ""
    number = re.search(r"\+7\d{10}", text)

    if not number:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    number = number.group(0)

    if number not in user_numbers:
        user_numbers[number] = {"user_id": message.from_user.id, "status": "pending"}

    user_id = user_numbers[number]["user_id"]

    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ö–æ–¥ –≤–≤–µ–¥–µ–Ω", callback_data=f"code_entered_{number}"),
        InlineKeyboardButton("‚ùå –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω", callback_data=f"code_not_entered_{number}")
    )

    try:
        photo = message.photo[-1].file_id
        msg = await bot.send_photo(user_id, photo=photo, caption="üîë –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:", reply_markup=keyboard)

        user_numbers[number]["msg_id"] = msg.message_id
        user_numbers[number]["photo_sent"] = True

        await message.reply("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ–≥–¥–∞ –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "-1" –∏–ª–∏ "+50")
@dp.message_handler(lambda message: message.text.startswith(("-", "+")))
async def handle_admin_code_input(message: types.Message):
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "-" –∏–ª–∏ "+"
    if not text[1:].isdigit() and (text[0] not in ["-", "+"]):
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    number = None
    if message.reply_to_message:
        match = re.search(r"\+7\d{10}", message.reply_to_message.text or "")
        if match:
            number = match.group(0)
    
    if number is None:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if number not in user_numbers:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if text.startswith("-"):
        # –°–ª–µ—Ç–µ–≤—à–∏–π –Ω–æ–º–µ—Ä
        user_id = user_numbers[number]["user_id"]
        await bot.send_message(user_id, f"‚ùå –ù–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª, –∫–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω.")
        await bot.send_message(ADMIN_GROUP_ID, f"‚ùå –ù–æ–º–µ—Ä {number} —Å–ª–µ—Ç–µ–ª.")
        del user_numbers[number]
    elif text.startswith("+") and user_numbers[number].get("confirmed"):
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–∏ –Ω–æ–º–µ—Ä–∞
        amount = float(text[1:])  # –°—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        user_id = user_numbers[number]["user_id"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        if user_id not in user_balances:
            user_balances[user_id] = 0.0
        user_balances[user_id] += amount

        await bot.send_message(user_id, f"‚úÖ –ù–æ–º–µ—Ä {number} –æ—Ç—Å—Ç–æ—è–ª. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} USD.")
        await bot.send_message(ADMIN_GROUP_ID, f"‚úÖ –ù–æ–º–µ—Ä {number} –æ—Ç—Å—Ç–æ—è–ª. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} USD.")

        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        del user_numbers[number]

# === üìÇ –ú–æ–∏ –Ω–æ–º–µ—Ä–∞ ===
@dp.callback_query_handler(lambda c: c.data == "my_numbers")
async def my_numbers(call: types.CallbackQuery):
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∏ —Å–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    confirmed_numbers = get_user_numbers(user_id, status="confirmed")
    dropped_numbers = get_user_numbers(user_id, status="dropped")

    message_text = "üìÇ **–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞:**\n\n"

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    if confirmed_numbers:
        message_text += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(
            [f"üìû {num[0]} - üïí {num[1]}" for num in confirmed_numbers]
        ) + "\n\n"
    else:
        message_text += "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.\n\n"

    # –°–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞
    if dropped_numbers:
        message_text += "‚ö†Ô∏è –°–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(
            [f"‚ùå {num[0]} - üïí {num[1]}" for num in dropped_numbers]
        ) + "\n\n"
    else:
        message_text += "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–ª–µ—Ç–µ–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤.\n\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_confirmed = len(confirmed_numbers)
    total_dropped = len(dropped_numbers)

    message_text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    message_text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {total_confirmed}\n"
    message_text += f"‚ùå –°–ª–µ—Ç–µ–≤—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤: {total_dropped}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer(message_text)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    back_to_main_menu = InlineKeyboardMarkup()
    back_to_main_menu.add(InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_menu)

    # –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    # –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º
    result = execute_query(query, params)
    return result

async def update_statistics_task():
    while True:
        update_statistics()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await asyncio.sleep(86400)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 24 —á–∞—Å–∞

@dp.callback_query_handler(lambda c: c.data.startswith("code_entered_"))
async def handle_code_confirmation(callback_query: types.CallbackQuery):
    number = callback_query.data.split("_")[-1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ –ë–î
    save_confirmed_number(number)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(callback_query.from_user.id, f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    await admin_list(callback_query)

    await callback_query.answer("‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    back_to_main_menu = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    )

    await call.message.answer(message_text, parse_mode="Markdown", reply_markup=back_to_main_menu)

#=== üí∞ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ ===
@dp.callback_query_handler(lambda c: c.data == "withdraw")
async def withdraw_request(call: types.CallbackQuery):
    user_id = call.from_user.id
    balance = user_balances.get(user_id, 0)

    if balance <= 0:
        await call.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤—ã–≤–æ–¥.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
    await call.message.answer(f"üí∏ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} USD.")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    back_to_main_menu = InlineKeyboardMarkup()
    back_to_main_menu.add(InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))

    # –ó–∞–ø—Ä–æ—Å —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
    await call.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_withdraw")))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
@dp.message_handler(lambda message: message.text.replace('.', '', 1).isdigit())
async def handle_withdraw_amount(message: types.Message):
    user_id = message.from_user.id
    balance = user_balances.get(user_id, 0)
    amount = float(message.text)

    if amount > balance:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        return

    if amount <= 0:
        await message.answer("‚ùå –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balances[user_id] -= amount

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await bot.send_message(WITHDRAW_GROUP_ID, f"üí∞ @{message.from_user.username} (ID: {user_id}) —Ö–æ—á–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ {amount} USD.")
    await message.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount} USD –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

# === ‚ùì FAQ ===
@dp.callback_query_handler(lambda c: c.data == "faq")
async def faq(call: types.CallbackQuery):
    faq_text = """**‚ùì FAQ ‚ùì**
1Ô∏è‚É£ –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∞–∫–∫–∞—É–Ω—Ç—ã.  
2Ô∏è‚É£ –í —Å–ª—É—á–∞–µ —Å–∫–∞–º–∞ –æ—Ñ–∏—Å–∞, –≤—ã–ø–ª–∞—Ç—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç—Å—è.  
3Ô∏è‚É£ –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –æ—Ç—Å—Ç–æ—è–ª 59 –º–∏–Ω –≤–º–µ—Å—Ç–æ 1 —á–∞—Å–∞ ‚Äî –æ–ø–ª–∞—Ç—ã –Ω–µ –±—É–¥–µ—Ç.  
4Ô∏è‚É£ –í—ã–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π.  
5Ô∏è‚É£ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π ¬´–°–∫–∏–ø¬ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.  
6Ô∏è‚É£ –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –†–§ –Ω–æ–º–µ—Ä–∞ 6+ –º–µ—Å—è—Ü–µ–≤.  
7Ô∏è‚É£ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∏—Å–∫–ª—é—á–∏—Ç—å –≤–∞—Å –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    back_to_main_menu = InlineKeyboardMarkup()
    back_to_main_menu.add(InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FAQ —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
    await call.message.answer(faq_text, parse_mode="Markdown", reply_markup=back_to_main_menu)
    await call.answer()
    
@dp.message_handler(commands=["broadcast"])
async def start_broadcast(message: types.Message):
    if message.from_user.id not in ADMIN_USER_IDS:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await dp.current_state(user=message.from_user.id).set_state("waiting_for_broadcast")

@dp.message_handler(state="waiting_for_broadcast")
async def send_broadcast(message: types.Message, state):
    text = message.text
    users = get_all_users()

    sent_count = 0
    failed_count = 0

    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            sent_count += 1
            await asyncio.sleep(0.5)  # –ê–Ω—Ç–∏—Å–ø–∞–º-–∑–∞–¥–µ—Ä–∂–∫–∞
        except Exception:
            failed_count += 1

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}, –û—à–∏–±–æ–∫: {failed_count}.")
    await state.finish()
    
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
def admin_panel():
    menu = InlineKeyboardMarkup(row_width=2)
    menu.add(
        InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫", callback_data="admin_list"),  # —Å–ø–∏—Å–æ–∫
        #InlineKeyboardButton("üì§ –°–¥–∞—Ç—å –Ω–æ–º–µ—Ä", callback_data="submit_number"),
        #InlineKeyboardButton("üí∞ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")
    )
    return menu

 #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¢–û–õ–¨–ö–û –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
def get_confirmed_numbers():
    conn = sqlite3.connect("bot_database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT number, time FROM confirmed_numbers")  
    numbers = cursor.fetchall()
    conn.close()
    return numbers if numbers else []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìú –°–ø–∏—Å–æ–∫"
@dp.callback_query_handler(lambda c: c.data == "admin_list")
async def admin_list(call: types.CallbackQuery):
    confirmed_numbers = get_confirmed_numbers()  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞

    if not confirmed_numbers:
        await call.message.answer("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç.")
        await call.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤
    list_text = "üìú **–°–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤:**\n\n"
    list_text += "\n".join([f"üìû {num[0]} - üïí {num[1]}" for num in confirmed_numbers])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await call.message.answer(list_text, parse_mode="Markdown")
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message_handler(commands=['admin'])
async def admin_menu(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø
    if message.from_user.id not in ADMIN_USER_IDS:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–≤–µ—Ç
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.callback_query_handler(lambda c: c.data == "admin_stats")
async def admin_stats(call: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    confirmed_numbers = get_confirmed_numbers()
    rejected_numbers = get_rejected_numbers()
    total_users = get_all_users_count()
    total_balance = get_total_balance()

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logging.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {confirmed_numbers}")
    logging.info(f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {rejected_numbers}")
    logging.info(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    logging.info(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = """üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {confirmed}
{confirmed_list}

‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {rejected}
{rejected_list}

üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {balance} USD
""".format(
        confirmed=len(confirmed_numbers),
        confirmed_list="\n".join([f"üìû {num[0]} - üïí {num[1]}" for num in confirmed_numbers]) if confirmed_numbers else "‚Äî",
        rejected=len(rejected_numbers),
        rejected_list="\n".join([f"‚ùå {num[0]} - üïí {num[1]}" for num in rejected_numbers]) if rejected_numbers else "‚Äî",
        users=total_users,
        balance=total_balance
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await call.message.edit_text(stats_text, parse_mode="Markdown", reply_markup=admin_panel())
    await call.answer()
# === üìÇ –ú–æ–∏ –Ω–æ–º–µ—Ä–∞ ===
@dp.callback_query_handler(lambda c: c.data == "my_numbers")
async def my_numbers(call: types.CallbackQuery):
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∏ —Å–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    confirmed_numbers = get_user_numbers(user_id, status="confirmed")
    rejected_numbers = get_user_numbers(user_id, status="rejected")

    message_text = "üìÇ **–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞:**\n\n"

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    if confirmed_numbers:
        message_text += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(
            [f"üìû {num[0]} - üïí {num[1]}" for num in confirmed_numbers]
        ) + "\n\n"
    else:
        message_text += "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.\n\n"

    # –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    if rejected_numbers:
        message_text += "‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n" + "\n".join(
            [f"‚ùå {num[0]} - üïí {num[1]}" for num in rejected_numbers]
        ) + "\n\n"
    else:
        message_text += "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.\n\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_confirmed = len(confirmed_numbers)
    total_rejected = len(rejected_numbers)

    message_text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    message_text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {total_confirmed}\n"
    message_text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: {total_rejected}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer(message_text)

    # –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    back_to_main_menu = InlineKeyboardMarkup()
    back_to_main_menu.add(InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=back_to_main_menu)
    await call.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id, username, referral_code=None, referred_by=None):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO users (user_id, username, referral_code, referred_by) VALUES (?, ?, ?, ?)",
                   (user_id, username, referral_code, referred_by))
    conn.commit()
    conn.close()
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def get_user(user_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_balance(user_id, amount):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
    conn.commit()
    conn.close()
    
# –ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
@dp.callback_query_handler(lambda c: c.data == "referral_link")
async def referral_link(call: types.CallbackQuery):
    user_id = call.from_user.id
    user = get_user(user_id)
    
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        referral_code = generate_referral_code()
        add_user(user_id, call.from_user.username, referral_code)
    
    referral_url = f"t.me/{BOT_USERNAME}?start={user[2]}"  # –ü—Ä–∏–º–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    await call.message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_url}")
    
    await call.answer()

from datetime import datetime
import sqlite3

@dp.callback_query_handler(lambda c: c.data.startswith("code_entered_") or c.data.startswith("code_not_entered_"))
async def handle_code_confirmation(callback_query: types.CallbackQuery):
    number = callback_query.data.split("_")[-1]
    user_id = user_numbers.get(number, {}).get("user_id")

    if not user_id:
        return await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if callback_query.data.startswith("code_entered_"):
        save_confirmed_number(number, now)
        text = f"‚úÖ –ù–æ–º–µ—Ä {number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –≤ {now}!"
    else:
        save_rejected_number(number, now)
        text = f"‚ùå –ù–æ–º–µ—Ä {number} –æ—Ç–∫–ª–æ–Ω—ë–Ω –≤ {now}!"

    save_user(user_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    admin_keyboard = InlineKeyboardMarkup().row(
        InlineKeyboardButton("üì© –í–∑—è—Ç—å –Ω–æ–º–µ—Ä", callback_data=f"take_{number}"),
        InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data=f"skip_{number}")
    )

    await bot.send_message(ADMIN_GROUP_ID, text, reply_markup=admin_keyboard)
    await callback_query.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

# === üî• –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=False)